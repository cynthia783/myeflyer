pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'cynthia783/myeflyer'
        DOCKER_CREDENTIALS_ID = 'myeflyer'
        SONARQUBE = 'sonarqube'  // Nom du serveur SonarQube configuré dans Jenkins
        SONARQUBE_SCANNER = 'sonarqube-scanner'  // Nom du scanner SonarQube configuré dans Jenkins
        SONAR_TOKEN = credentials('sonar-token')  // Utilisation sécurisée du token SonarQube
    }

    tools {
        dockerTool 'Docker'  // Assurez-vous que 'docker' est bien installé sur Jenkins
    }

    stages {
        stage('Cloner le repo') {
            steps {
                git branch: 'main', url: 'https://github.com/cynthia783/myeflyer.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKER_IMAGE}:${BUILD_NUMBER}")
                }
            }
        }

        // SÉCURITÉ - Scans

        stage('TRIVY FS SCAN') {
            steps {
                script {
                    // Assurez-vous que les fichiers à scanner existent dans le répertoire
                    sh "trivy fs ${WORKSPACE} > trivyfs.txt"
                    archiveArtifacts artifacts: 'trivyfs.txt', fingerprint: true
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Utilisation de 'withCredentials' pour gérer de manière sécurisée le token
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        withSonarQubeEnv(SONARQUBE) {
                            sh """
                                sonar-scanner \
                                -Dsonar.projectKey=myeflyer \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://localhost:9000 \
                                -Dsonar.login=${SONAR_TOKEN}  // Utilisation du token sécurisé
                            """
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    // Attendre que le code passe le "Quality Gate" de SonarQube
                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate()  // Attendre que l'analyse SonarQube soit validée
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        dockerImage.push()  // Push du Docker avec le tag du build
                        dockerImage.push('latest')  // Push du tag 'latest'
                    }
                }
            }
        }

        stage('Déploiement sur VM') {
            steps {
                script {
                    // Déploiement de l'image Docker sur la VM
                    sh """
                    docker stop eflyer || true
                    docker rm eflyer || true
                    docker pull ${DOCKER_IMAGE}:${BUILD_NUMBER}
                    docker run -d --name eflyer -p 8001:80 ${DOCKER_IMAGE}:${BUILD_NUMBER}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Nettoyer l'espace de travail après chaque exécution
        }
    }
}
