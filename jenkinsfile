pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'cynthia783/myeflyer'
        DOCKER_CREDENTIALS_ID = 'myeflyer'
        SONARQUBE = 'SonarQube'  // Nom du serveur SonarQube configuré dans Jenkins
        SONARQUBE_SCANNER = 'SonarQube Scanner'  // Nom du scanner SonarQube configuré dans Jenkins
    }

    tools {
        dockerTool 'Docker'  // Assure-toi que 'docker' est bien installé sur Jenkins.
        dependency-check 'DP-Check'
    }

    stages {
        stage('Cloner le repo') {
            steps {
                git branch: 'main', url: 'https://github.com/cynthia783/myeflyer.git'

            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKER_IMAGE}:${BUILD_NUMBER}")
                }
            }
        }

    // === SÉCURITÉ - Scans ===

        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
                archiveArtifacts artifacts: 'trivyfs.txt', fingerprint: true
            }
        }    
    
        stage('SonarQube Analysis') {
                steps {
                    script {
                        // Lancer l'analyse SonarQube sur ton code source
                        withSonarQubeEnv(SONARQUBE) {
                            sh """
                                sonar-scanner \
                                -Dsonar.projectKey=myeflyer \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://localhost:9000 \
                                -Dsonar.login=${SONAR_TOKEN}  // Utilise ton token d'authentification
                            """
                        }
                    }
                }
            }

        stage('Quality Gate') {
                steps {
                    script {
                        // Attendre que le code passe le "Quality Gate" de SonarQube
                        timeout(time: 1, unit: 'HOURS') {
                            waitForQualityGate()  // Attendre que l'analyse SonarQube soit validée
                        }
                    }
                }
            }

        stage('Push to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        dockerImage.push()
                        dockerImage.push('latest') // Tag latest aussi
                    }
                }
            }
        }

        stage('Déploiement sur VM') {
            steps {
                sh """
                docker stop eflyer || true
                docker rm eflyer || true
                docker pull ${DOCKER_IMAGE}:${BUILD_NUMBER}
                docker run -d --name eflyer -p 8001:80 ${DOCKER_IMAGE}:${BUILD_NUMBER}
                """
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
